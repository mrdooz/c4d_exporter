binary_namespace = protocol;
friendly_namespace = scene;

struct Color
{
    float r, g, b, a;
};

struct Transform
{
    float pos[3];
    float rot[3];
    float scale[3];
};

struct Base
{
    string name;
    int id;
    int parent_id;
    Transform xform_local;
    Transform xform_global;
};

struct NullObject : Base
{

};

struct Camera : Base
{
    float vertical_fov;
    float near_plane, far_plane;
};

struct TargetCam : Camera
{
    int target_id;
};

struct DirCam : Camera
{
    float dir[3];
};

struct Light : Base
{
    enum FalloffType
    {
        None,
        Linear,
    };

    Color color;
    float intensity;

    FalloffType falloffType;
    float falloffRadius = 0;
};

struct Omni : Light
{

};

struct Directional : Light
{
    float dir[3];
};

struct Spot : Light
{
    float outerAngle;
};

struct Material
{
    struct Component
    {
        // 4cc
        int type;
        Color col;
        string texture;
        float brightness;  
    };

    string name;
    int id;
    Component components[];
};

struct Mesh : Base
{
    struct MaterialGroup
    {
        int material_id;
        int start_index;
        int num_indices;
    };

    struct DataStream
    {
        string name;
        int flags;
        bytes data;
    };

    MaterialGroup material_groups[];
    DataStream data_streams[];

    // bounding sphere
    float sx, sy, sz, r;
};

struct Scene
{
    NullObject null_objects[];
    Material materials[];
    Mesh meshes[];
    TargetCam targetCams[];
    DirCam dirCams[];
    Omni omnis[];
    Spot spots[];
    Directional directionals[];
};
